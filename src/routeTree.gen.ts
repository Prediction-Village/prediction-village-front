/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MarketImport } from './routes/market'
import { Route as IndexImport } from './routes/index'
import { Route as MarketPredictionPredictionIdImport } from './routes/market.prediction.$predictionId'

// Create/Update Routes

const MarketRoute = MarketImport.update({
  id: '/market',
  path: '/market',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MarketPredictionPredictionIdRoute =
  MarketPredictionPredictionIdImport.update({
    id: '/prediction/$predictionId',
    path: '/prediction/$predictionId',
    getParentRoute: () => MarketRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/market': {
      id: '/market'
      path: '/market'
      fullPath: '/market'
      preLoaderRoute: typeof MarketImport
      parentRoute: typeof rootRoute
    }
    '/market/prediction/$predictionId': {
      id: '/market/prediction/$predictionId'
      path: '/prediction/$predictionId'
      fullPath: '/market/prediction/$predictionId'
      preLoaderRoute: typeof MarketPredictionPredictionIdImport
      parentRoute: typeof MarketImport
    }
  }
}

// Create and export the route tree

interface MarketRouteChildren {
  MarketPredictionPredictionIdRoute: typeof MarketPredictionPredictionIdRoute
}

const MarketRouteChildren: MarketRouteChildren = {
  MarketPredictionPredictionIdRoute: MarketPredictionPredictionIdRoute,
}

const MarketRouteWithChildren =
  MarketRoute._addFileChildren(MarketRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/market': typeof MarketRouteWithChildren
  '/market/prediction/$predictionId': typeof MarketPredictionPredictionIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/market': typeof MarketRouteWithChildren
  '/market/prediction/$predictionId': typeof MarketPredictionPredictionIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/market': typeof MarketRouteWithChildren
  '/market/prediction/$predictionId': typeof MarketPredictionPredictionIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/market' | '/market/prediction/$predictionId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/market' | '/market/prediction/$predictionId'
  id: '__root__' | '/' | '/market' | '/market/prediction/$predictionId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MarketRoute: typeof MarketRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MarketRoute: MarketRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/market"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/market": {
      "filePath": "market.tsx",
      "children": [
        "/market/prediction/$predictionId"
      ]
    },
    "/market/prediction/$predictionId": {
      "filePath": "market.prediction.$predictionId.tsx",
      "parent": "/market"
    }
  }
}
ROUTE_MANIFEST_END */
